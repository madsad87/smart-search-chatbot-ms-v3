<?php
/**
 * Persona Management Class
 * 
 * Handles persona settings and configuration
 */

// Prevent direct access
defined('ABSPATH') || exit;

class SSGC_Persona {
    
    /**
     * Single instance of the class
     */
    private static $instance = null;
    
    /**
     * Get single instance
     */
    public static function get_instance() {
        if (null === self::$instance) {
            self::$instance = new self();
        }
        return self::$instance;
    }
    
    /**
     * Constructor
     */
    private function __construct() {
        add_action('admin_init', array($this, 'handle_persona_settings'));
        add_action('wp_ajax_ssgc_test_persona', array($this, 'test_persona'));
    }
    
    /**
     * Handle persona settings form submission
     */
    public function handle_persona_settings() {
        if (!isset($_POST['ssgc_persona_settings_nonce']) || 
            !wp_verify_nonce($_POST['ssgc_persona_settings_nonce'], 'ssgc_persona_settings')) {
            return;
        }
        
        if (!current_user_can('manage_options')) {
            return;
        }
        
        $settings = array(
            'enabled' => isset($_POST['persona_enabled']),
            'instructions' => sanitize_textarea_field($_POST['persona_instructions'] ?? ''),
            'style' => sanitize_text_field($_POST['persona_style'] ?? ''),
            'name' => sanitize_text_field($_POST['persona_name'] ?? ''),
            'description' => sanitize_textarea_field($_POST['persona_description'] ?? ''),
        );
        
        update_option('ssgc_persona_settings', $settings);
        
        add_action('admin_notices', function() {
            echo '<div class="notice notice-success is-dismissible"><p>' . 
                 __('Persona settings saved successfully.', 'smart-search-chatbot') . 
                 '</p></div>';
        });
    }
    
    /**
     * Test persona via AJAX
     */
    public function test_persona() {
        check_ajax_referer('ssgc_admin_nonce', 'nonce');
        
        if (!current_user_can('manage_options')) {
            wp_die('Unauthorized');
        }
        
        $test_message = sanitize_text_field($_POST['message'] ?? 'Hello, how can you help me?');
        $persona_settings = get_option('ssgc_persona_settings', array());
        
        // Build test messages
        $messages = array(
            array(
                'role' => 'system',
                'content' => $persona_settings['instructions'] ?? 'You are a helpful AI assistant.'
            ),
            array(
                'role' => 'user',
                'content' => $test_message
            )
        );
        
        // For testing, return a mock response that shows the persona is working
        $response = array(
            'success' => true,
            'data' => array(
                'text' => 'This is a test response showing how your persona would respond. In a live environment, this would be generated by your configured LLM using the persona instructions you\'ve set.',
                'persona_used' => $persona_settings['instructions'] ?? 'Default instructions',
                'style' => $persona_settings['style'] ?? 'Default style'
            )
        );
        
        wp_send_json($response);
    }
    
    /**
     * Get current persona settings
     */
    public function get_settings() {
        return get_option('ssgc_persona_settings', array(
            'enabled' => true,
            'instructions' => 'You are a helpful AI assistant.',
            'style' => 'friendly',
            'name' => 'AI Assistant',
            'description' => 'A helpful AI assistant for your website.'
        ));
    }
    
    /**
     * Get persona instructions for chat
     */
    public function get_instructions() {
        $settings = $this->get_settings();
        
        if (!($settings['enabled'] ?? true)) {
            return 'You are a helpful AI assistant.';
        }
        
        return $settings['instructions'] ?? 'You are a helpful AI assistant.';
    }
}
